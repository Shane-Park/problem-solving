package shane.leetcode.problems.medium;

import io.github.shanepark.Ps;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Runtime 32 ms Beats 15.3%
 * Memory 83 MB Beats 50.43%
 */
public class Q1557MinimumNumberOfVerticesToReachAllNodes4 {

    @Test
    public void test() {
        assertThat(findSmallestSetOfVertices(6, Ps.intList("[[0,1],[0,2],[2,5],[3,4],[4,2]]"))).containsExactlyInAnyOrder(0, 3);
        assertThat(findSmallestSetOfVertices(5, Ps.intList("[[0,1],[2,1],[3,1],[1,4],[2,4]]"))).containsExactlyInAnyOrder(0, 2, 3);
        assertThat(findSmallestSetOfVertices(48, Ps.intList("[[7,3],[20,25],[30,41],[28,41],[31,44],[22,19],[42,20],[9,0],[14,31],[45,35],[15,30],[39,45],[37,13],[14,1],[27,1],[31,15],[29,11],[16,0],[30,16],[4,35],[17,13],[32,35],[5,34],[46,23],[18,10],[36,41],[8,12],[22,12],[37,44],[11,41],[44,25],[18,36],[23,9],[37,16],[2,18],[26,23],[39,30],[2,12],[1,33],[40,4],[30,27],[17,6],[41,1],[22,45],[42,6],[40,42],[6,32],[34,32],[43,23],[32,16],[22,7],[11,46],[18,31],[42,32],[23,6],[43,45],[13,44],[9,20],[12,7],[36,4],[13,6],[37,25],[1,0],[2,7],[5,10],[6,1],[5,20],[23,33],[6,27],[21,17],[19,1],[28,44],[31,33],[42,43],[12,32],[8,0],[11,19],[24,9],[12,20],[27,20],[39,12],[28,23],[28,13],[19,32],[31,0],[47,45],[40,24],[19,6],[5,39],[29,42],[44,6],[20,1],[16,33],[23,20],[36,44],[34,44],[17,44],[14,29],[45,33],[34,6],[37,11],[24,16],[2,25],[15,44],[4,7],[28,4],[31,9],[4,45],[8,40],[22,40],[31,23],[36,43],[45,0],[32,27],[44,27],[38,33],[34,1],[39,36],[11,1],[24,23],[36,31],[37,30],[2,16],[29,2],[4,20],[7,9],[5,41],[18,3],[21,22],[17,30],[11,32],[23,0],[34,24],[24,30],[14,17],[15,20],[12,31],[25,1],[26,6],[29,27],[40,13],[30,0],[7,6],[27,45],[23,35],[6,25],[21,31],[40,19],[19,3],[17,23],[32,41],[22,28],[31,35],[44,9],[23,25],[47,12],[34,19],[37,38],[18,46],[36,13],[10,24],[14,2],[38,15],[13,23],[2,28],[3,1],[6,16],[21,24],[30,45],[41,27],[22,23],[44,0],[18,15],[16,35],[47,21],[21,2],[40,32],[36,46],[34,42],[22,9],[34,4],[39,41],[11,10],[14,5],[38,6],[37,19],[19,43],[28,6],[0,33],[29,7],[40,1],[2,43],[17,1],[42,27],[47,18],[21,11],[6,45],[34,37],[22,0],[18,32],[24,25],[36,25],[15,9],[13,9],[37,28],[11,25],[26,39],[31,30],[18,1],[40,46],[30,33],[47,27],[10,43],[21,20],[7,33],[32,20],[46,4],[43,33],[10,31],[24,6],[28,20],[2,3],[24,44],[27,9],[30,6],[7,0],[3,32],[41,16],[31,45],[46,15],[23,27],[21,7],[32,1],[37,36],[44,33],[9,1],[14,30],[34,11],[24,13],[38,13],[12,16],[29,18],[15,35],[30,9],[28,9],[5,25],[46,44],[8,37],[7,23],[41,25],[31,42],[5,35],[18,13],[33,35],[21,0],[36,40],[8,11],[17,32],[41,35],[7,45],[10,1],[8,17],[11,12],[38,4],[39,1],[39,31],[19,45],[2,15],[0,35],[24,32],[6,9],[40,3],[4,41],[2,41],[8,44],[31,19],[46,25],[18,4],[23,41],[40,41],[21,9],[6,35],[34,35],[17,25],[22,6],[46,3],[44,23],[18,30],[42,35],[39,32],[44,45],[12,6],[13,7],[26,17],[24,1],[28,31],[2,6],[29,30],[6,0],[4,16],[19,24],[2,32],[26,37],[22,39],[31,24],[42,0],[41,45],[47,3],[43,35],[37,3],[11,16],[28,12],[46,43],[27,33],[40,23],[19,7],[32,45],[46,13],[20,0],[29,43],[18,16],[21,5],[8,6],[44,35],[10,4],[34,9],[15,25],[24,15],[38,3],[36,23],[15,45],[4,6],[29,10],[20,33],[16,1],[40,30],[21,36],[4,44],[28,33],[31,20],[47,17],[36,42],[45,1],[41,33],[11,40],[10,15],[34,0],[12,9],[2,19],[38,28],[4,13],[5,0],[3,16],[21,45],[8,46],[41,0],[6,33],[40,43],[46,1],[12,42],[13,43],[12,0],[26,31],[12,30],[28,25],[3,25],[40,12],[5,19],[28,45],[22,31],[11,38],[18,23],[12,33],[36,38],[34,18],[17,42],[14,27],[10,27],[37,1],[25,45],[26,42],[31,3],[5,28],[29,15],[27,35],[40,25],[47,44],[41,20],[31,41],[46,19],[22,8],[36,11],[38,1],[15,1],[39,4],[38,27],[20,35],[3,45],[40,0],[21,34],[30,23],[2,42],[22,41],[29,34],[18,9],[16,25],[21,12],[17,36],[44,20],[10,13],[9,16],[14,15],[2,17],[26,18],[39,27],[2,11],[25,33],[21,43],[2,37],[26,38],[9,45],[40,45],[47,24],[30,32],[10,42],[8,28],[32,9],[13,41],[44,41],[9,25],[15,23],[11,31],[12,24],[27,16],[25,0],[39,16],[24,43],[14,34],[29,26],[3,27],[30,1],[7,1],[5,17],[3,33],[21,30],[16,45],[36,32],[32,0],[10,25],[39,9],[3,0],[4,27],[31,13],[21,39],[4,33],[43,6],[32,33],[31,43],[44,1],[18,12],[9,33],[10,38],[17,33],[38,45],[10,0],[8,16],[11,13],[36,19],[15,3],[2,20],[14,44],[15,41],[28,7],[1,35],[31,16],[29,32],[47,29],[21,10],[10,33],[7,43],[22,1],[24,0],[4,9],[3,20],[40,9],[4,23],[2,35],[46,35],[10,40],[17,19],[22,24],[42,45],[34,23],[36,1],[10,28],[24,7],[13,27],[26,5],[24,45],[4,30]]")))
                .containsExactlyInAnyOrder(14, 47);
        assertThat(findSmallestSetOfVertices(49,
                Ps.intList("[[26,47],[31,6],[30,41],[21,28],[28,41],[43,3],[23,26],[21,6],[11,48],[9,0],[12,17],[1,28],[39,11],[13,20],[28,10],[31,15],[1,40],[21,37],[2,47],[22,42],[18,10],[33,4],[8,18],[35,26],[25,16],[3,11],[1,15],[40,4],[21,46],[30,27],[7,15],[23,40],[6,32],[21,8],[22,7],[42,32],[36,4],[15,10],[13,6],[1,0],[5,10],[40,11],[4,17],[41,10],[23,33],[40,17],[6,27],[31,33],[44,15],[42,43],[23,31],[12,32],[10,48],[44,37],[9,29],[18,48],[36,3],[34,15],[0,28],[13,25],[24,47],[27,10],[40,24],[30,47],[19,6],[28,43],[17,10],[42,18],[47,11],[34,44],[43,27],[44,28],[36,10],[14,41],[38,26],[30,12],[4,7],[3,48],[44,27],[9,17],[14,48],[28,3],[20,41],[2,36],[6,38],[7,39],[43,47],[17,48],[37,7],[0,7],[1,6],[29,27],[6,7],[42,15],[32,41],[22,28],[29,47],[42,41],[36,39],[43,36],[17,41],[8,2],[44,39],[9,3],[39,48],[0,30],[30,11],[6,16],[34,48],[41,27],[20,3],[29,40],[18,15],[40,32],[34,42],[11,10],[24,18],[36,18],[38,24],[28,6],[0,33],[6,11],[19,17],[7,18],[29,33],[16,26],[21,11],[34,37],[33,24],[38,39],[3,15],[1,3],[24,37],[27,48],[7,11],[20,17],[23,36],[41,47],[31,36],[22,27],[18,27],[23,2],[35,7],[25,7],[13,28],[3,26],[27,47],[46,15],[33,42],[37,14],[12,16],[1,29],[26,41],[31,12],[8,37],[17,14],[16,37],[44,24],[18,39],[8,17],[35,27],[37,17],[26,48],[0,35],[4,41],[2,41],[22,6],[33,30],[38,37],[37,48],[14,18],[12,6],[36,27],[15,11],[26,17],[4,10],[2,6],[29,30],[19,24],[32,48],[40,16],[13,38],[44,36],[9,30],[1,26],[46,43],[45,8],[8,6],[35,14],[33,2],[39,10],[25,48],[28,11],[29,10],[1,47],[30,17],[18,11],[7,47],[38,32],[36,48],[1,20],[25,23],[13,12],[0,37],[6,15],[47,48],[34,33],[22,4],[44,47],[25,24],[13,5],[24,3],[1,7],[25,2],[31,26],[22,37],[23,32],[47,39],[30,37],[31,32],[35,37],[43,37],[37,39],[35,11],[45,39],[25,11],[14,39],[20,36],[32,47],[35,42],[7,48],[43,48],[0,20],[36,17],[1,17],[25,12],[15,47],[19,40],[2,48],[0,32],[46,48],[8,41],[5,47],[42,26],[23,44],[40,38],[7,41],[43,41],[13,48],[14,15],[12,11],[2,11],[5,14],[3,18],[25,33],[2,37],[6,39],[30,32],[22,26],[13,41],[45,44],[0,24],[25,0],[26,7],[3,27],[29,46],[44,10],[6,48],[45,11],[43,39],[44,32],[18,47],[9,2],[36,14],[28,18],[27,15],[4,27],[0,43],[46,47],[5,26],[16,14],[6,17],[30,18],[40,27],[8,36],[46,17],[9,33],[6,43],[34,43],[32,7],[14,10],[37,18],[29,6],[31,16],[20,11],[9,42],[42,24],[16,27],[46,2],[24,26],[25,27],[1,2],[5,12],[25,39],[46,35],[20,18],[23,39],[31,39],[5,48],[8,30],[41,48],[44,43],[35,6],[33,10],[45,42],[25,28],[26,27],[24,7],[0,48]]")))
                .containsExactlyInAnyOrder(1, 9, 13, 19, 21, 22, 34, 45);
    }

    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
        Set<Integer> children = edges.stream()
                .map(e -> e.get(1))
                .collect(Collectors.toSet());

        return IntStream.range(0, n)
                .filter(i -> !children.contains(i))
                .boxed()
                .collect(Collectors.toList());
    }


}
